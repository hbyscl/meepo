<configuration>
	
	<!-- 根据实际情况修改路径地址,也可以在这里定义属性，考虑到便于运维分发打包时进行参数值替换使用属性文件 -->
	<!--<property file="E:/WorkSpace/hongtoo-agz/task/task-test/target/classes/logback.properties" />-->
	<property resource="./logback.properties" />

	<!-- 
	 | 以下是appender，STDOUT一般不鼓励使用，只是保留在这里如果确实有特殊需要时可以使用，
	 | 主要的appender包括:SIMPLE_SIFT,APP_SIFT,APP_ERROR_SIFT,ROLLING,ERROR_ROLLING
	 | 
	 | 1）SIMPLE_SIFT: 给应用子级别logger用的，因为通常这样的logger是更小粒度的，所以这个appender
	 | 混合了所有的等级,其日志文件名格式如：iwork_util.org.cheng.meepo.log,
	 | 归档文件如：2016-07-20\org.cheng.meepo\org.cheng.meepo_0.log
	 | 
	 | 2）APP_SIFT,APP_ERROR_SIFT: 给应用根级logger使用的，前者输出非error级日志,后者输出error级日志，
	 | 其日志文件名格式如iwork_util.org.cheng.meepo.err, iwork_util.org.cheng.meepo.log,
	 | 归档文件如：2016-07-20\org.cheng.meepo\org.cheng.meepo_0.log,
	 | 2016-07-20\org.cheng.meepo\org.cheng.meepo_0.err.gz
	 |
	 | 3）ROLLING和ERROR_ROLLING: 提供给logback root logger使用的，未定义的logger也将由这个logger'接管'
	 | 其日志文件名格式如: iwork_util.err, iwork_util.log,
	 | 归档文件如： iwork_util_0.err.gz, iwork_util_0.log
	 | -->
	
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{track_no}] %X{from_host}:%X{from_app} >> %X{to_host}:%X{to_app} %X{track_type} [%X{biz_data}] [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
	</appender>
	
	<!-- 
	 | 按logger name独立输出日志文件，日志文件名追加了有效logger name，按天滚动，
	 | 按文件大小自动分块归档，按日期以及logger name分目录
	 | 此appender主要用于当需要独立获得某个包或者某个任意命名logger的日志文件时 
	 |-->
    <appender name="SIMPLE_SIFT" class="ch.qos.logback.classic.sift.SiftingAppender">
        <discriminator class="org.cheng.meepo.service.LoggerNameDiscriminator"/>
        <sift>
            <appender name="ROLLING-${loggerName}" class="ch.qos.logback.core.rolling.RollingFileAppender">
				<file>${LOG_FILE_PATH}/${APP_NAME}.${loggerName}.log</file>
				<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
					<fileNamePattern>${LOG_FILE_PATH}/%d{yyyy-MM-dd}/${loggerName}/${loggerName}_%i.log</fileNamePattern>
					<maxHistory>${MAX_HISTORY}</maxHistory>
					<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> 
						<maxFileSize>${MAX_FILE_SIZE}</maxFileSize> 
					</timeBasedFileNamingAndTriggeringPolicy> 
				</rollingPolicy>
				<encoder>
					<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{track_no}] %X{from_host}:%X{from_app} >> %X{to_host}:%X{to_app} %X{track_type} [%X{biz_data}] [%thread] %-5level %logger{36} - %msg%n</pattern>
				</encoder>
			</appender>
        </sift>
    </appender>
	
	<!--
	 | 按logger name独立输出非error级别(即warn,info,debug级别)日志文件，
	 | 日志文件名追加了有效logger name，按天滚动，按文件大小自动分块归档，
	 | 按日期以及logger name分目录
	 | -->
    <appender name="APP_SIFT" class="ch.qos.logback.classic.sift.SiftingAppender">
        <discriminator class="org.cheng.meepo.service.LoggerNameDiscriminator"/>
        <sift>
            <appender name="ROLLING-${loggerName}" class="ch.qos.logback.core.rolling.RollingFileAppender">
				<file>${LOG_FILE_PATH}/${APP_NAME}.${loggerName}.log</file>
				<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
					<fileNamePattern>${LOG_FILE_PATH}/%d{yyyy-MM-dd}/${loggerName}/${loggerName}_%i.log</fileNamePattern>
					<maxHistory>${MAX_HISTORY}</maxHistory>
					<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> 
						<maxFileSize>${MAX_FILE_SIZE}</maxFileSize> 
					</timeBasedFileNamingAndTriggeringPolicy> 
				</rollingPolicy>
				<encoder>
					<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{track_no}] %X{from_host}:%X{from_app} >> %X{to_host}:%X{to_app} %X{track_type} [%X{biz_data}] [%thread] %-5level %logger{36} - %msg%n</pattern>
				</encoder>
				<filter class="ch.qos.logback.classic.filter.LevelFilter">
					<level>ERROR</level>  
		        	<onMatch>DENY</onMatch>  
		        	<onMismatch>ACCEPT</onMismatch>
				</filter>
			</appender>
        </sift>
    </appender>
    
    <!-- 
     | 按logger name独立输出error级别日志文件，日志文件名追加了有效logger name，按天滚动，
	 | 按文件大小自动分块归档，按日期以及logger name分目录 
	 | -->
    <appender name="APP_ERROR_SIFT" class="ch.qos.logback.classic.sift.SiftingAppender">
        <discriminator class="org.cheng.meepo.service.LoggerNameDiscriminator"/>
        <sift>
            <appender name="ROLLING-${loggerName}" class="ch.qos.logback.core.rolling.RollingFileAppender">
				<file>${LOG_FILE_PATH}/${APP_NAME}.${loggerName}.err</file>
				<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
					<fileNamePattern>${LOG_FILE_PATH}/%d{yyyy-MM-dd}/${loggerName}/${loggerName}_%i.err.gz</fileNamePattern>
					<maxHistory>${MAX_HISTORY}</maxHistory>
					<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> 
						<maxFileSize>${MAX_FILE_SIZE}</maxFileSize> 
					</timeBasedFileNamingAndTriggeringPolicy> 
				</rollingPolicy>
				<encoder>
					<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{track_no}] %X{from_host}:%X{from_app} >> %X{to_host}:%X{to_app} %X{track_type} [%X{biz_data}] [%thread] %-5level %logger{36} - %msg%n</pattern>
				</encoder>
				<filter class="ch.qos.logback.classic.filter.LevelFilter">
					<level>ERROR</level>  
		        	<onMatch>ACCEPT</onMatch>  
		        	<onMismatch>DENY</onMismatch>
				</filter>
			</appender>
        </sift>
    </appender>

	<!-- 非错误日志支持按天滚动，按文件大小自动分块归档，按日期分目录 -->
	<appender name="ROLLING"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_FILE_PATH}/${APP_NAME}.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_FILE_PATH}/%d{yyyy-MM-dd}/${APP_NAME}_%i.log</fileNamePattern>
			<maxHistory>${MAX_HISTORY}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> 
				<maxFileSize>${MAX_FILE_SIZE}</maxFileSize> 
			</timeBasedFileNamingAndTriggeringPolicy> 
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{track_no}] %X{from_host}:%X{from_app} >> %X{to_host}:%X{to_app} %X{track_type} [%X{biz_data}] [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>  
        	<onMatch>DENY</onMatch>  
        	<onMismatch>ACCEPT</onMismatch>
		</filter>
	</appender>

	<!-- 错误日志支持按天滚动，按文件大小自动分块归档，按日期分目录 -->
	<appender name="ERROR_ROLLING"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_FILE_PATH}/${APP_NAME}.err</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_FILE_PATH}/%d{yyyy-MM-dd}/${APP_NAME}_%i.err.gz</fileNamePattern>
			<maxHistory>${MAX_HISTORY}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"> 
				<maxFileSize>${MAX_FILE_SIZE}</maxFileSize> 
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{track_no}] %X{from_host}:%X{from_app} >> %X{to_host}:%X{to_app} %X{track_type} [%X{biz_data}] [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>  
        	<onMatch>ACCEPT</onMatch>  
        	<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	
	
	<!-- 
	 | 以下为logger定义部分，logger定义分为三部分：
	 | 1）logback root logger
	 | 2）应用根级别logger
	 | 3）应用子级别logger
	 | 通常根据需要可能定义少数的应用根级别logger来追踪问题，当这个级别的日志量仍旧过大时，
	 | 可以考虑应用子级别logger
	 | -->
	
	
	<!-- logback根级别logger -->
	<root level="debug">
		<appender-ref ref="ROLLING" />
		<appender-ref ref="ERROR_ROLLING" />
	</root>
	
	
	<!-- 应用根级别logger开始 -->
	<!-- 
	 | 建议生产环境下，所有logger的additivity为false，因为通常需要独立定义logger意味着需要独立的日志记录，
	 | 即独立定义每个logger的appender，通过additivity为false可以减少冗余appender，此外需注意此处是爱工作的根日志记录器 
	 | -->
	<!--<logger name="org.cheng.meepo" additivity="false" level="debug">-->
		<!--<appender-ref ref="APP_SIFT" />-->
		<!--<appender-ref ref="APP_ERROR_SIFT" />-->
	<!--</logger>-->
	<!-- 应用根logger结束 -->
	
	
	<!-- 应用子级别logger开始 -->
	<logger name="org.cheng.meepo" additivity="false" level="debug">
		<appender-ref ref="STDOUT" />
	</logger>
	<!-- 应用子级别logger结束 -->
	
</configuration>